import time
import logging
import random
import numpy as np
from datetime import datetime, timedelta
from config import UTC3_TZ

class CandleAnalyzer:
    def __init__(self):
        self.price_history = {}
        self.candle_cache = {}
        
    def generate_realistic_price_movement(self, pair, current_time):
        """ุชูููุฏ ุญุฑูุฉ ุณุนุฑูุฉ ูุงูุนูุฉ ุจูุงุก ุนูู ุงูููุช ูุงูุฒูุฌ"""
        try:
            # ุฃุณุนุงุฑ ุฃุณุงุณูุฉ ูุงูุนูุฉ
            base_prices = {
                'USD/BRL': (5.15, 5.25), 'USD/EGP': (30.80, 31.20), 
                'USD/TRY': (32.20, 32.80), 'USD/ARS': (348.0, 355.0),
                'USD/COP': (3880, 3950), 'USD/DZD': (133.0, 135.0),
                'USD/IDR': (15500, 15700), 'USD/BDT': (109.0, 112.0),
                'USD/CAD': (1.35, 1.38), 'USD/NGN': (1380, 1420),
                'USD/PKR': (276.0, 280.0), 'USD/NR': (0.98, 1.02),
                'USD/MXN': (17.10, 17.40), 'USD/PHP': (56.10, 56.50)
            }
            
            min_price, max_price = base_prices.get(pair, (0.99, 1.01))
            base_price = (min_price + max_price) / 2
            
            # ุชุฃุซูุฑ ุงูููุช ุนูู ุงูุชููุจุงุช
            hour = current_time.hour
            volatility_multiplier = 1.0
            
            # ุฃููุงุช ุงูุชููุจุงุช ุงูุนุงููุฉ (ุฌูุณุงุช ุงูุชุฏุงูู)
            if 9 <= hour <= 12:  # ุงูุฌูุณุฉ ุงูุฃูุฑูุจูุฉ
                volatility_multiplier = 1.5
            elif 14 <= hour <= 17:  # ุงูุฌูุณุฉ ุงูุฃูุฑูููุฉ
                volatility_multiplier = 2.0
            elif 22 <= hour <= 24:  # ุงูุฌูุณุฉ ุงูุขุณูููุฉ
                volatility_multiplier = 1.3
            
            # ุญุฑูุฉ ุณุนุฑูุฉ ูุงูุนูุฉ
            price_change = random.normalvariate(0, 0.001) * volatility_multiplier * base_price
            
            # ุชุญุฏูุฏ ุณุนุฑ ุงูุงูุชุชุงุญ (ุขุฎุฑ ุณุนุฑ ุฅุบูุงู ุฃู ุณุนุฑ ุฃุณุงุณู)
            if pair in self.price_history and self.price_history[pair]:
                open_price = self.price_history[pair][-1]['close']
            else:
                open_price = base_price + random.uniform(-0.002, 0.002) * base_price
            
            # ุญุณุงุจ ุณุนุฑ ุงูุฅุบูุงู
            close_price = open_price + price_change
            
            # ุชุญุฏูุฏ ุงูููุฉ ูุงููุงุน ุจุดูู ูุงูุนู
            price_range = abs(price_change) * 2
            high_price = max(open_price, close_price) + random.uniform(0, price_range)
            low_price = min(open_price, close_price) - random.uniform(0, price_range)
            
            # ุงูุชุฃูุฏ ูู ุฃู ุงูุฃุณุนุงุฑ ุถูู ุงููุฏู ุงููุงูุนู
            high_price = min(high_price, max_price)
            low_price = max(low_price, min_price)
            close_price = max(min(close_price, max_price), min_price)
            
            candle_data = {
                'open': round(open_price, 4),
                'high': round(high_price, 4),
                'low': round(low_price, 4),
                'close': round(close_price, 4),
                'timestamp': current_time,
                'pair': pair,
                'is_realistic': True
            }
            
            # ุญูุธ ูู ุงูุณุฌู
            if pair not in self.price_history:
                self.price_history[pair] = []
            self.price_history[pair].append(candle_data)
            
            # ุงูุญูุงุธ ุนูู ุขุฎุฑ 50 ุดูุนุฉ ููุท
            if len(self.price_history[pair]) > 50:
                self.price_history[pair] = self.price_history[pair][-50:]
            
            return candle_data
            
        except Exception as e:
            logging.error(f"โ ุฎุทุฃ ูู ุชูููุฏ ุงูุญุฑูุฉ ุงูุณุนุฑูุฉ: {e}")
            return self.get_fallback_candle(pair, current_time)
    
    def get_fallback_candle(self, pair, current_time):
        """ุดูุนุฉ ุงุญุชูุงุทูุฉ ูู ุญุงูุฉ ุงูุฎุทุฃ"""
        base_price = random.uniform(1.0, 1.5)
        price_change = random.uniform(-0.005, 0.005) * base_price
        
        return {
            'open': round(base_price, 4),
            'high': round(base_price + abs(price_change) * 1.5, 4),
            'low': round(base_price - abs(price_change) * 1.5, 4),
            'close': round(base_price + price_change, 4),
            'timestamp': current_time,
            'pair': pair,
            'is_realistic': False
        }
    
    def wait_for_candle_close(self, trade_start_time):
        """ุงูุชุธุงุฑ ุฅุบูุงู ุงูุดูุนุฉ (30 ุซุงููุฉ)"""
        try:
            candle_close_time = trade_start_time + timedelta(seconds=35)  # +5 ุซูุงูู ุชุฃุฎูุฑ
            current_time = datetime.now(UTC3_TZ)
            wait_seconds = (candle_close_time - current_time).total_seconds()
            
            if wait_seconds > 0:
                logging.info(f"โณ ุงูุชุธุงุฑ ุฅุบูุงู ุงูุดูุนุฉ: {wait_seconds:.1f} ุซุงููุฉ")
                time.sleep(wait_seconds)
            
            return True
        except Exception as e:
            logging.error(f"โ ุฎุทุฃ ูู ุงูุชุธุงุฑ ุฅุบูุงู ุงูุดูุนุฉ: {e}")
            return False
    
    def get_candle_data(self, pair, trade_start_time):
        """ุงูุญุตูู ุนูู ุจูุงูุงุช ุงูุดูุนุฉ ุจุนุฏ ุฅุบูุงููุง"""
        try:
            # ุงูุงูุชุธุงุฑ ุญุชู ุฅุบูุงู ุงูุดูุนุฉ
            if not self.wait_for_candle_close(trade_start_time):
                return self.generate_realistic_price_movement(pair, datetime.now(UTC3_TZ))
            
            # ุชูููุฏ ุงูุดูุนุฉ ุจุนุฏ ุงูุฅุบูุงู
            current_time = datetime.now(UTC3_TZ)
            candle_data = self.generate_realistic_price_movement(pair, current_time)
            
            logging.info(f"๐ ุจูุงูุงุช ุงูุดูุนุฉ ูู {pair}:")
            logging.info(f"   โ OPEN: {candle_data['open']}")
            logging.info(f"   โ HIGH: {candle_data['high']}") 
            logging.info(f"   โ LOW: {candle_data['low']}")
            logging.info(f"   โ CLOSE: {candle_data['close']}")
            
            return candle_data
            
        except Exception as e:
            logging.error(f"โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุจูุงูุงุช ุงูุดูุนุฉ: {e}")
            return self.generate_realistic_price_movement(pair, datetime.now(UTC3_TZ))
    
    def determine_trade_result(self, candle_data, trade_direction, entry_price=None):
        """ุชุญุฏูุฏ ูุชูุฌุฉ ุงูุตููุฉ ุจุฏูุฉ"""
        try:
            open_price = candle_data['open']
            close_price = candle_data['close']
            
            # ุฅุฐุง ูู ูุชู ุชุญุฏูุฏ ุณุนุฑ ุงูุฏุฎููุ ุงุณุชุฎุฏู ุณุนุฑ ุงูุงูุชุชุงุญ
            if entry_price is None:
                entry_price = open_price
            
            logging.info(f"๐ฏ ุชุญููู ุงููุชูุฌุฉ:")
            logging.info(f"   โ ุงูุงุชุฌุงู: {trade_direction}")
            logging.info(f"   โ ุณุนุฑ ุงูุฏุฎูู: {entry_price}")
            logging.info(f"   โ ุณุนุฑ ุงูุฅุบูุงู: {close_price}")
            logging.info(f"   โ ุงููุฑู: {abs(close_price - entry_price):.6f}")
            
            if trade_direction == "BUY":
                # ููุดุฑุงุก: ุงูุฑุจุญ ุนูุฏูุง ูุฑุชูุน ุงูุณุนุฑ
                if close_price > entry_price:
                    result = "WIN"
                    logging.info(f"   โ ุงููุชูุฌุฉ: ๐ WIN (ุงุฑุชูุงุน ุงูุณุนุฑ)")
                else:
                    result = "LOSS" 
                    logging.info(f"   โ ุงููุชูุฌุฉ: โ LOSS (ุงูุฎูุงุถ ุงูุณุนุฑ)")
                    
            else:  # SELL
                # ููุจูุน: ุงูุฑุจุญ ุนูุฏูุง ููุฎูุถ ุงูุณุนุฑ
                if close_price < entry_price:
                    result = "WIN"
                    logging.info(f"   โ ุงููุชูุฌุฉ: ๐ WIN (ุงูุฎูุงุถ ุงูุณุนุฑ)")
                else:
                    result = "LOSS"
                    logging.info(f"   โ ุงููุชูุฌุฉ: โ LOSS (ุงุฑุชูุงุน ุงูุณุนุฑ)")
            
            return result
            
        except Exception as e:
            logging.error(f"โ ุฎุทุฃ ูู ุชุญุฏูุฏ ูุชูุฌุฉ ุงูุตููุฉ: {e}")
            return random.choice(['WIN', 'LOSS'])
    
    def get_historical_candles(self, pair, count=20):
        """ุงูุญุตูู ุนูู ุดููุน ุชุงุฑูุฎูุฉ ููุชุญููู ุงูููู"""
        try:
            candles = []
            current_time = datetime.now(UTC3_TZ)
            
            # ุชูููุฏ ุดููุน ุชุงุฑูุฎูุฉ ูุงูุนูุฉ
            for i in range(count):
                candle_time = current_time - timedelta(minutes=(count - i) * 3)
                candle = self.generate_realistic_price_movement(pair, candle_time)
                candles.append(candle)
            
            return candles
        except Exception as e:
            logging.error(f"โ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุดููุน ุงูุชุงุฑูุฎูุฉ: {e}")
            return []
